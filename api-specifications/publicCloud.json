{
  "components": {
    "securitySchemes": {
      "X-LSW-Auth": {
        "name": "X-LSW-Auth",
        "type": "apiKey",
        "in": "header",
        "description": "API key authentication by setting `X-LSW-Auth` header."
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "limit": {
        "description": "Limit the number of results returned.",
        "example": 20,
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer"
        }
      },
      "offset": {
        "description": "Return results starting from the given offset.",
        "example": 10,
        "in": "query",
        "name": "offset",
        "schema": {
          "type": "integer"
        }
      },
      "instanceId": {
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "name": "instanceId",
        "in": "path",
        "required": true,
        "description": "Instance's ID",
        "example": "695ddd91-051f-4dd6-9120-938a927a47d0"
      },
      "equipmentId": {
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "name": "equipmentId",
        "in": "path",
        "required": true,
        "description": "Equipment's UUID",
        "example": "695ddd91-051f-4dd6-9120-938a927a47d0"
      },
      "loadBalancerId": {
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "name": "loadBalancerId",
        "in": "path",
        "required": true,
        "description": "Load balancer ID",
        "example": "695ddd91-051f-4dd6-9120-938a927a47d0"
      },
      "listenerId": {
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "name": "listenerId",
        "in": "path",
        "required": true,
        "description": "Listener ID",
        "example": "695ddd91-051f-4dd6-9120-938a927a47d0"
      },
      "from": {
        "name": "from",
        "schema": {
          "type": "string",
          "format": "date"
        },
        "in": "query",
        "description": "The start of the interval to get the metric"
      },
      "to": {
        "name": "to",
        "schema": {
          "type": "string",
          "format": "date"
        },
        "in": "query",
        "description": "The end of the interval to get the metric. Must be greater than the date provided in `from`"
      },
      "cpuGranularity": {
        "name": "granularity",
        "schema": {
          "type": "string",
          "enum": ["5m", "10m", "30m", "60m"]
        },
        "in": "query",
        "description": "How the metrics are grouped by"
      }
    },
    "schemas": {
      "_metadata": {
        "title": "metadata",
        "type": "object",
        "description": "Metadata about the collection",
        "properties": {
          "totalCount": {
            "type": "number",
            "example": 2,
            "description": "Total amount of orders in this collection"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "example": 0,
            "description": "The offset used to generate this response"
          },
          "limit": {
            "type": "number",
            "default": 5,
            "example": 5,
            "description": "The limit used to generate this response"
          }
        }
      },
      "getRegionListResult": {
        "type": "object",
        "properties": {
          "regions": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "region",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The region's name.",
                  "example": "eu-west-3"
                },
                "location": {
                  "type": "string",
                  "description": "The city where the region is located.",
                  "example": "Amsterdam"
                }
              }
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "errorResult": {
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "The correlation ID of the current request."
          },
          "errorCode": {
            "type": "string",
            "description": "The error code."
          },
          "errorMessage": {
            "type": "string",
            "description": "A human friendly description of the error."
          },
          "errorDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "name": {
        "type": "string",
        "description": "Instance type's name"
      },
      "instanceResources": {
        "title": "instanceResource",
        "description": "Resources available for the load balancer",
        "type": "object",
        "properties": {
          "cpu": {
            "type": "object",
            "title": "cpu",
            "properties": {
              "value": {
                "type": "integer",
                "example": "2"
              },
              "unit": {
                "type": "string",
                "example": "vCPU"
              }
            },
            "description": "Number of cores"
          },
          "memory": {
            "title": "memory",
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": "3.75"
              },
              "unit": {
                "type": "string",
                "example": "GiB"
              }
            },
            "description": "Total memory in GiB"
          },
          "publicNetworkSpeed": {
            "type": "object",
            "title": "publicNetworkSpeed",
            "properties": {
              "value": {
                "type": "integer",
                "example": "1"
              },
              "unit": {
                "type": "string",
                "example": "Gbps"
              }
            },
            "description": "Public network speed in Gbps"
          },
          "privateNetworkSpeed": {
            "type": "object",
            "title": "privateNetworkSpeed",
            "properties": {
              "value": {
                "type": "integer",
                "example": "1000"
              },
              "unit": {
                "type": "string",
                "example": "Mbps"
              }
            },
            "description": "Private network speed in Gbps"
          }
        }
      },
      "storageTypes": {
        "type": "array",
        "nullable": true,
        "description": "The supported storage types for the instance type",
        "items": {
          "type": "string"
        },
        "example": ["CENTRAL", "LOCAL"]
      },
      "price": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "currencySymbol": {
            "type": "string",
            "example": "$"
          },
          "compute": {
            "title": "compute",
            "type": "object",
            "properties": {
              "hourlyPrice": {
                "type": "string"
              },
              "monthlyPrice": {
                "type": "string"
              }
            }
          },
          "storage": {
            "title": "storage",
            "type": "object",
            "properties": {
              "local": {
                "title": "local",
                "type": "object",
                "properties": {
                  "hourlyPrice": {
                    "type": "string"
                  },
                  "monthlyPrice": {
                    "type": "string"
                  }
                }
              },
              "central": {
                "title": "central",
                "type": "object",
                "properties": {
                  "hourlyPrice": {
                    "type": "string"
                  },
                  "monthlyPrice": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "getInstanceTypeListResult": {
        "type": "object",
        "properties": {
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          },
          "instanceTypes": {
            "type": "array",
            "items": {
              "title": "instanceTypeDetails",
              "properties": {
                "name": {
                  "$ref": "#/components/schemas/name"
                },
                "resources": {
                  "$ref": "#/components/schemas/instanceResources"
                },
                "storageTypes": {
                  "$ref": "#/components/schemas/storageTypes"
                },
                "prices": {
                  "$ref": "#/components/schemas/price"
                }
              }
            }
          }
        }
      },
      "contractType": {
        "description": "Select HOURLY for billing based on hourly usage, else MONTHLY for billing per month usage",
        "type": "string",
        "enum": ["HOURLY", "MONTHLY"]
      },
      "contractState": {
        "type": "string",
        "enum": ["ACTIVE", "DELETE_SCHEDULED"]
      },
      "operatingSystem": {
        "title": "operatingSystem",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "UBUNTU_20_04_64BIT"
          },
          "name": {
            "type": "string",
            "example": "Ubuntu 20.04 LTS (x86_64)"
          },
          "version": {
            "type": "string",
            "example": "20.04"
          },
          "family": {
            "type": "string",
            "example": "linux"
          },
          "flavour": {
            "type": "string",
            "example": "ubuntu"
          },
          "architecture": {
            "type": "string",
            "example": "x86_64"
          },
          "marketApps": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "LOADBALANCER"
            }
          },
          "storageTypes": {
            "type": "array",
            "description": "The supported storage types for the instance type",
            "items": {
              "type": "string"
            },
            "example": ["CENTRAL", "LOCAL"]
          }
        }
      },
      "instanceState": {
        "type": "string",
        "description": "The instance's current state",
        "enum": ["RUNNING", "STOPPED", "CREATING", "DESTROYING", "DESTROYED"]
      },
      "productType": {
        "type": "string",
        "description": "The product type"
      },
      "instanceType": {
        "title": "instanceType",
        "type": "string",
        "description": "Instance type",
        "example": "lsw.m3.large"
      },
      "rootDiskSize": {
        "type": "integer",
        "description": "The root disk's size in GB. Must be at least 5 GB for Linux and FreeBSD instances and 50 GB for Windows instances",
        "minimum": 5,
        "maximum": 1000
      },
      "networkType": {
        "type": "string",
        "enum": ["INTERNAL", "PUBLIC"],
        "example": "internal"
      },
      "ip": {
        "title": "ip",
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "example": "127.0.0.1",
            "description": "Ip Address"
          },
          "prefixLength": {
            "type": "string",
            "example": "28",
            "description": "The number of leading bits in the IP address"
          },
          "version": {
            "type": "integer",
            "enum": [4, 6],
            "description": "Ip version"
          },
          "nullRouted": {
            "type": "boolean",
            "description": "Whether or not the IP has been nulled"
          },
          "mainIp": {
            "type": "boolean"
          },
          "networkType": {
            "$ref": "#/components/schemas/networkType"
          },
          "reverseLookup": {
            "type": "string",
            "nullable": true
          },
          "ddos": {
            "title": "ddos",
            "type": "object",
            "properties": {
              "detectionProfile": {
                "type": "string",
                "example": "STANDARD_DEFAULT"
              },
              "protectionType": {
                "type": "string",
                "example": "STANDARD"
              }
            }
          }
        }
      },
      "contract": {
        "title": "contract",
        "type": "object",
        "properties": {
          "billingFrequency": {
            "type": "integer",
            "description": "The billing frequency (in months) of the instance.",
            "example": 1,
            "enum": [1, 3, 6, 12]
          },
          "term": {
            "type": "integer",
            "description": "The contract commitment (in months)"
          },
          "type": {
            "$ref": "#/components/schemas/contractType"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-11-30T16:31:28+00:00",
            "nullable": true
          },
          "renewalsAt": {
            "type": "string",
            "description": "Date when the contract will be automatically renewed",
            "format": "date-time",
            "example": "2023-11-30T16:31:28+00:00"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the contract was created",
            "format": "date-time",
            "example": "2023-11-30T16:31:28+00:00"
          },
          "state": {
            "$ref": "#/components/schemas/contractState"
          }
        }
      },
      "iso": {
        "title": "iso",
        "type": "object",
        "nullable": true,
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "marketAppId": {
        "type": "string",
        "description": "Market App ID that must be installed into the instance",
        "example": "CPANEL",
        "nullable": true
      },
      "instance": {
        "title": "instance",
        "type": "object",
        "properties": {
          "equipmentId": {
            "type": "string",
            "description": "The customer's equipment ID"
          },
          "salesOrgId": {
            "type": "string"
          },
          "customerId": {
            "type": "string",
            "description": "The customer ID who owns the instance"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The instance unique identifier"
          },
          "resources": {
            "$ref": "#/components/schemas/instanceResources"
          },
          "region": {
            "type": "string",
            "description": "The region where the instance was launched into"
          },
          "reference": {
            "type": "string",
            "description": "The identifying name set to the instance"
          },
          "operatingSystem": {
            "$ref": "#/components/schemas/operatingSystem"
          },
          "state": {
            "$ref": "#/components/schemas/instanceState"
          },
          "productType": {
            "$ref": "#/components/schemas/productType"
          },
          "hasPublicIpV4": {
            "type": "boolean"
          },
          "hasPrivateNetwork": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/instanceType"
          },
          "rootDiskSize": {
            "$ref": "#/components/schemas/rootDiskSize"
          },
          "rootDiskStorageType": {
            "type": "string",
            "description": "The root disk's storage type",
            "enum": ["LOCAL", "CENTRAL"]
          },
          "ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ip"
            }
          },
          "startedAt": {
            "type": "string",
            "description": "Date and time when the instance was started for the first time, right after launching it",
            "format": "date-time",
            "nullable": true
          },
          "contract": {
            "$ref": "#/components/schemas/contract"
          },
          "iso": {
            "$ref": "#/components/schemas/iso"
          },
          "marketAppId": {
            "$ref": "#/components/schemas/marketAppId"
          },
          "privateNetwork": {
            "title": "privateNetwork",
            "type": "object",
            "nullable": true,
            "properties": {
              "privateNetworkId": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "example": "CONFIGURED"
              },
              "subnet": {
                "type": "string",
                "example": "10.0.0.0/16"
              }
            }
          }
        }
      },
      "getInstanceListResult": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/instance"
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "launchInstanceOpts": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "Region to launch the instance into"
          },
          "type": {
            "$ref": "#/components/schemas/instanceType"
          },
          "operatingSystemId": {
            "type": "string",
            "description": "Operating System ID",
            "example": "UBUNTU_22_04_64BIT"
          },
          "marketAppId": {
            "$ref": "#/components/schemas/marketAppId"
          },
          "reference": {
            "type": "string",
            "description": "An identifying name you can refer to the instance"
          },
          "contractType": {
            "type": "string",
            "enum": ["HOURLY", "MONTHLY"]
          },
          "contractTerm": {
            "type": "integer",
            "description": "Contract commitment. Used only when contract type is MONTHLY",
            "enum": [0, 1, 3, 6, 12]
          },
          "billingFrequency": {
            "type": "integer",
            "description": "How often you wish to be charged. Used only when contract type is MONTHLY. '1' means every month, '3' every three months and so on.",
            "enum": [1, 3, 6, 12]
          },
          "rootDiskSize": {
            "$ref": "#/components/schemas/rootDiskSize"
          },
          "rootDiskStorageType": {
            "type": "string",
            "description": "The root disk's storage type",
            "enum": ["LOCAL", "CENTRAL"]
          },
          "sshKey": {
            "type": "string",
            "description": "Public SSH key to be installed into the instance. Must be used only on Linux/FreeBSD instances"
          }
        },
        "required": [
          "region",
          "operatingSystemId",
          "contractType",
          "rootDiskStorageType",
          "contractTerm",
          "billingFrequency"
        ]
      },
      "updateInstanceOpts": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/instanceType"
          },
          "reference": {
            "type": "string",
            "description": "An identifying name you can refer to the instance"
          },
          "contractType": {
            "type": "string",
            "enum": ["MONTHLY"]
          },
          "contractTerm": {
            "type": "integer",
            "description": "Contract commitment. Can only be used when updating the contract type from HOURLY and MONTHLY.",
            "enum": [0, 1, 3, 6, 12]
          },
          "billingFrequency": {
            "type": "integer",
            "description": "How often you wish to be charged. Can only be used when updating the contract type from HOURLY to MONTHLY. '1' means every month, '3' every three months and so on.",
            "enum": [1, 3, 6, 12]
          },
          "rootDiskSize": {
            "$ref": "#/components/schemas/rootDiskSize"
          }
        }
      },
      "getConsoleAccessToInstanceResult": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to the console"
          }
        }
      },
      "getUpdateInstanceTypeListResult": {
        "type": "object",
        "properties": {
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          },
          "instanceTypes": {
            "type": "array",
            "items": {
              "title": "updateInstanceType",
              "properties": {
                "name": {
                  "$ref": "#/components/schemas/name"
                },
                "resources": {
                  "$ref": "#/components/schemas/instanceResources"
                },
                "prices": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "storageTypes": {
                  "$ref": "#/components/schemas/storageTypes"
                }
              }
            }
          }
        }
      },
      "credentialType": {
        "title": "credentialType",
        "type": "string",
        "enum": ["OPERATING_SYSTEM", "CONTROL_PANEL"]
      },
      "credential": {
        "type": "object",
        "title": "credential",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/credentialType"
          },
          "username": {
            "type": "string",
            "example": "root"
          }
        }
      },
      "getCredentialListResult": {
        "type": "object",
        "properties": {
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/credential"
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "storeCredentialOpts": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/credentialType"
          },
          "username": {
            "type": "string",
            "description": "Can contain only alphanumeric values and characters `@`, `.`, `-` and `_`"
          },
          "password": {
            "type": "string",
            "description": "The password you'd like to store"
          }
        },
        "required": ["type", "username", "password"]
      },
      "storeCredentialResult": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/credentialType"
          },
          "username": {
            "type": "string",
            "description": "The provided username"
          },
          "password": {
            "type": "string",
            "description": "The provided password"
          }
        }
      },
      "getCredentialListByTypeResult": {
        "type": "object",
        "properties": {
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/credential"
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "getCredentialResult": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/credentialType"
          },
          "username": {
            "type": "string",
            "example": "root"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "12341234"
          }
        }
      },
      "updateCredentialOpts": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The new password"
          }
        },
        "required": ["password"]
      },
      "updateCredentialResult": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/credentialType"
          },
          "username": {
            "type": "string",
            "description": "The provided username"
          },
          "password": {
            "type": "string",
            "description": "The provided password"
          }
        }
      },
      "tier": {
        "title": "tier",
        "type": "object",
        "properties": {
          "usage": {
            "type": "number",
            "description": "Traffic sent, in GB",
            "example": 1000
          },
          "price": {
            "description": "Total price of the tier, based on the usage. The first tier is free, so this will be 0 for the first tier. From tier 1 onwards, the usage has costs. Each tier has it own price.",
            "type": "number",
            "example": 0
          }
        }
      },
      "getExpensesResult": {
        "type": "object",
        "properties": {
          "billing": {
            "title": "billing",
            "type": "object",
            "properties": {
              "instances": {
                "type": "array",
                "description": "List of instances to be billed in the period",
                "items": {
                  "title": "expenseResultInstance",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier for the instance.",
                      "example": "b778824a-a96e-4f6f-9713-7b7196f09c4f"
                    },
                    "reference": {
                      "type": "string",
                      "description": "The reference of the instance.",
                      "example": "test-instance"
                    },
                    "resources": {
                      "$ref": "#/components/schemas/instanceResources"
                    },
                    "contract": {
                      "$ref": "#/components/schemas/contract"
                    },
                    "startedAt": {
                      "type": "string",
                      "description": "Date when the instance was started",
                      "format": "date-time",
                      "example": "2023-11-30T16:31:46+00:00"
                    },
                    "endedAt": {
                      "type": "string",
                      "description": "Date when the instance ended",
                      "format": "date-time",
                      "example": "2023-11-30T16:31:46+00:00"
                    },
                    "rootDiskSize": {
                      "$ref": "#/components/schemas/rootDiskSize"
                    },
                    "rootDiskType": {
                      "type": "string",
                      "description": "The root disk type as specified during its launch or update.",
                      "enum": ["CENTRAL", "LOCAL"],
                      "example": "CENTRAL"
                    },
                    "billingType": {
                      "type": "string",
                      "description": "The billing type of the instance. PREPAID is used for monthly commited instances, POSTPAID for hourly instances.",
                      "enum": ["POSTPAID", "PREPAID"],
                      "example": "POSTPAID"
                    },
                    "hours": {
                      "type": "integer",
                      "description": "The number of hours the instance has been running.",
                      "example": 14
                    },
                    "from": {
                      "type": "string",
                      "description": "The start date of the billing period.",
                      "format": "date-time",
                      "example": "2023-12-01T00:00:00+00:00"
                    },
                    "to": {
                      "type": "string",
                      "description": "The end date of the billing period.",
                      "format": "date-time",
                      "example": "2023-12-01T13:18:41+00:00"
                    },
                    "price": {
                      "type": "string",
                      "description": "The price of the instance for the billing period.",
                      "example": "0.72"
                    }
                  }
                }
              },
              "traffic": {
                "title": "traffic",
                "type": "object",
                "description": "Traffic billing information, in tiers. ",
                "properties": {
                  "unit": {
                    "type": "string",
                    "example": "GB"
                  },
                  "values": {
                    "title": "values",
                    "type": "object",
                    "properties": {
                      "tier_0": {
                        "$ref": "#/components/schemas/tier"
                      },
                      "tier_1": {
                        "$ref": "#/components/schemas/tier"
                      },
                      "tier_2": {
                        "$ref": "#/components/schemas/tier"
                      },
                      "tier_3": {
                        "$ref": "#/components/schemas/tier"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "getIsoListResult": {
        "type": "object",
        "properties": {
          "isos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iso"
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "getOperatingSystemListResult": {
        "type": "object",
        "properties": {
          "operatingSystems": {
            "type": "array",
            "items": {
              "title": "operatingSystemDetail",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "UBUNTU_20_04_64BIT"
                },
                "name": {
                  "type": "string",
                  "example": "Ubuntu 20.04 LTS (x86_64)"
                },
                "version": {
                  "type": "string",
                  "example": "20.04"
                },
                "family": {
                  "type": "string",
                  "example": "linux"
                },
                "flavour": {
                  "type": "string",
                  "example": "ubuntu"
                },
                "architecture": {
                  "type": "string",
                  "example": "x86_64"
                },
                "marketApps": {
                  "type": "array",
                  "description": "The marketplace app IDs used to reference to on other operations",
                  "items": {
                    "type": "string"
                  }
                },
                "storageTypes": {
                  "type": "array",
                  "description": "The storage types supported by the operating systems",
                  "items": {
                    "type": "string",
                    "enum": ["LOCAL", "CENTRAL"]
                  }
                }
              }
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "getMarketAppListResult": {
        "type": "object",
        "properties": {
          "marketApps": {
            "type": "array",
            "items": {
              "title": "marketApp",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "category": {
                  "type": "string"
                },
                "version": {
                  "type": "string",
                  "nullable": true
                },
                "family": {
                  "type": "string"
                },
                "operatingSystem": {
                  "$ref": "#/components/schemas/operatingSystem"
                }
              }
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "attachIsoOpts": {
        "type": "object",
        "properties": {
          "isoId": {
            "type": "string",
            "description": "The ISO ID, obtained using the ISO endpoints"
          }
        },
        "required": ["isoId"]
      },
      "getReinstallOsListResult": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/operatingSystem"
        }
      },
      "reinstallInstanceOpts": {
        "type": "object",
        "properties": {
          "operatingSystemId": {
            "type": "string",
            "description": "The Operating System ID"
          },
          "marketAppId": {
            "type": "string",
            "description": "The Market App to be installed"
          }
        },
        "required": ["operatingSystemId"]
      },
      "loadBalancerType": {
        "type": "string",
        "description": "Load balancer type",
        "example": "lsw.m3.large"
      },
      "stickySession": {
        "title": "stickySession",
        "type": "object",
        "nullable": true,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "If sticky session is enabled or not"
          },
          "maxLifeTime": {
            "type": "integer",
            "description": "Time that the Load Balancer routes the requests from one requester to the same target instance"
          }
        }
      },
      "healthCheck": {
        "title": "healthCheck",
        "type": "object",
        "nullable": true,
        "properties": {
          "method": {
            "type": "string",
            "enum": ["GET", "HEAD", "POST", "OPTIONS"],
            "description": "HTTP method to be used for health check"
          },
          "uri": {
            "type": "string",
            "description": "URI to check in the target instances",
            "example": "/"
          },
          "host": {
            "type": "string",
            "description": "Host for the health check if any",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "description": "Port number"
          }
        }
      },
      "loadBalancer": {
        "title": "loadBalancer",
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The customer ID who owns the load balancer"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The load balancer unique identifier"
          },
          "type": {
            "$ref": "#/components/schemas/loadBalancerType"
          },
          "resources": {
            "$ref": "#/components/schemas/instanceResources"
          },
          "region": {
            "type": "string",
            "description": "The region where the load balancer was launched into"
          },
          "reference": {
            "type": "string",
            "description": "The identifying name set to the load balancer"
          },
          "state": {
            "$ref": "#/components/schemas/instanceState"
          },
          "rootDiskSize": {
            "$ref": "#/components/schemas/rootDiskSize"
          },
          "ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ip"
            }
          },
          "startedAt": {
            "type": "string",
            "description": "Date and time when the instance was started for the first time, right after launching it",
            "format": "date-time"
          },
          "contract": {
            "$ref": "#/components/schemas/contract"
          },
          "configuration": {
            "description": "Different configuration assigned for the load balancer",
            "title": "loadBalancerConfiguration",
            "type": "object",
            "properties": {
              "stickySession": {
                "$ref": "#/components/schemas/stickySession"
              },
              "balance": {
                "type": "string",
                "description": "Algorithm to be used for load balancer",
                "enum": ["ROUNDROBIN", "LEASTCONN", "SOURCE"]
              },
              "healthCheck": {
                "$ref": "#/components/schemas/healthCheck"
              },
              "xForwardedFor": {
                "type": "boolean",
                "description": "Is xForwardedFor header enabled or not"
              },
              "idleTimeOut": {
                "type": "integer",
                "description": "Time to close the connection if load balancer is idle"
              },
              "targetPort": {
                "type": "integer",
                "description": "Port on which the backend (target) servers are listening to handle incoming requests"
              }
            }
          }
        }
      },
      "getLoadBalancerListResult": {
        "type": "object",
        "properties": {
          "loadBalancers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/loadBalancer"
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "launchLoadBalancerOpts": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "Region to launch the load balancer into"
          },
          "type": {
            "$ref": "#/components/schemas/loadBalancerType"
          },
          "reference": {
            "type": "string",
            "description": "An identifying name you can refer to the load balancer"
          },
          "contractType": {
            "type": "string",
            "enum": ["HOURLY", "MONTHLY"],
            "description": "The contract applicable for the load balancer"
          },
          "billingFrequency": {
            "type": "integer",
            "description": "How often you wish to be charged. Used only when contract type is MONTHLY. '1' means every month, '3' every three months and so on.",
            "enum": [1, 3, 6, 12]
          },
          "rootDiskStorageType": {
            "type": "string",
            "description": "The root disk's storage type",
            "enum": ["LOCAL", "CENTRAL"]
          },
          "targetPort": {
            "type": "integer",
            "description": "The port that the registered instances listen to"
          }
        },
        "required": [
          "region",
          "type",
          "contractType",
          "billingFrequency",
          "rootDiskStorageType",
          "targetPort"
        ]
      },
      "updateLoadBalancerOpts": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/loadBalancerType"
          },
          "reference": {
            "type": "string",
            "description": "An identifying name you can refer to the load balancer"
          },
          "contractType": {
            "$ref": "#/components/schemas/contractType"
          },
          "stickySession": {
            "$ref": "#/components/schemas/stickySession"
          },
          "balance": {
            "type": "string",
            "description": "Algorithm to be used for load balancer",
            "enum": ["ROUNDROBIN", "LEASTCONN", "SOURCE"]
          },
          "healthCheck": {
            "$ref": "#/components/schemas/healthCheck"
          },
          "xForwardedFor": {
            "type": "boolean",
            "description": "Is xForwardedFor enabled or not"
          },
          "idleTimeOut": {
            "type": "integer",
            "description": "Time to close the connection if load balancer is idle"
          },
          "targetPort": {
            "type": "integer",
            "description": "Port on which the backend (target) servers are listening to handle incoming requests"
          }
        }
      },
      "loadBalancerListenerOpts": {
        "title": "loadBalancerListenerOpts",
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": ["HTTPS", "HTTP", "TCP"]
          },
          "port": {
            "type": "integer",
            "description": "Port that the listener listens to"
          },
          "certificate": {
            "title": "certificate",
            "type": "object",
            "properties": {
              "privateKey": {
                "type": "string",
                "description": "Client Private Key. Required only if protocol is HTTPS"
              },
              "certificate": {
                "type": "string",
                "description": "Client Certificate. Required only if protocol is HTTPS"
              },
              "chain": {
                "type": "string",
                "description": "CA certificate. Not required, but can be added if protocol is HTTPS"
              }
            }
          }
        },
        "required": ["protocol", "port"]
      },
      "loadBalancerListener": {
        "title": "loadBalancerListener",
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol of the listener."
          },
          "port": {
            "type": "integer",
            "description": "Port for the listener"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The listener unique identifier"
          }
        }
      },
      "getLoadBalancerTargetListResult": {
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "target",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The instance unique identifier"
                },
                "reference": {
                  "type": "string",
                  "description": "The identifying name set to the instance"
                },
                "operatingSystem": {
                  "$ref": "#/components/schemas/operatingSystem"
                },
                "state": {
                  "$ref": "#/components/schemas/instanceState"
                },
                "healthCheckStatus": {
                  "type": "object",
                  "title": "healthCheckStatus",
                  "properties": {
                    "checkStatus": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "ips": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ip"
                  }
                }
              }
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "loadBalancerTargetOpts": {
        "title": "loadBalancerTargetOpts",
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "title": "loadBalancerTargetOpt",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "getIpListResult": {
        "type": "object",
        "properties": {
          "ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ip"
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      },
      "updateIpOpts": {
        "type": "object",
        "properties": {
          "reverseLookup": {
            "type": "string"
          }
        },
        "required": ["reverseLookup"]
      },
      "nullRouteIpOpts": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The reason why the IP is being null-routed"
          },
          "automatedUnnulingAt": {
            "type": "integer",
            "description": "If provided, reverts the operation automatically in the specified value, in hours",
            "minimum": 1,
            "maximum": 17520
          }
        }
      },
      "trafficMetric": {
        "type": "object",
        "title": "trafficMetric",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "title": "trafficMetricValue",
              "type": "object",
              "properties": {
                "value": {
                  "type": "integer",
                  "description": "Bytes consumed"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "unit": {
            "type": "string",
            "enum": ["B"]
          }
        }
      },
      "trafficMetricSummary": {
        "type": "object",
        "title": "trafficMetricSummary",
        "properties": {
          "average": {
            "type": "string",
            "description": "Average incoming traffic based on the amount of grouped data points, in human-readable format (KB, MB, GB)",
            "example": "855.28 KB"
          },
          "expected": {
            "type": "string",
            "description": "Expected incoming traffic given the average times the amount of days between the `from` and `to` dates, in human-readable format (KB, MB, GB)",
            "example": "25.66 MB"
          },
          "total": {
            "type": "string",
            "description": "Total incoming traffic, in human-readable format (KB, MB, GB)",
            "example": "1.71 MB"
          },
          "peak": {
            "type": "object",
            "title": "peak",
            "properties": {
              "value": {
                "type": "string",
                "description": "The highest amount of incoming traffic given the provided aggregation and granularity"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "getDataTrafficMetricsResult": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "object",
            "title": "metrics",
            "properties": {
              "DOWN_PUBLIC": {
                "$ref": "#/components/schemas/trafficMetric"
              },
              "UP_PUBLIC": {
                "$ref": "#/components/schemas/trafficMetric"
              }
            }
          },
          "_metadata": {
            "title": "trafficMetricsMetaData",
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              },
              "granularity": {
                "type": "string",
                "enum": ["DAY"],
                "description": "The provided granularity"
              },
              "aggregation": {
                "type": "string",
                "enum": ["SUM"],
                "description": "The provided aggregation"
              },
              "summary": {
                "title": "summary",
                "type": "object",
                "properties": {
                  "DOWN_PUBLIC": {
                    "$ref": "#/components/schemas/trafficMetricSummary"
                  },
                  "UP_PUBLIC": {
                    "$ref": "#/components/schemas/trafficMetricSummary"
                  }
                }
              }
            }
          }
        }
      },
      "getCpuMetricsResult": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "object",
            "properties": {
              "cpuMetrics": {
                "title": "cpuMetrics",
                "type": "object",
                "description": "CPU usage metrics, in percentage",
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "title": "cpuMetricsValue",
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "number",
                          "description": "CPU usage"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  },
                  "unit": {
                    "type": "string",
                    "enum": ["%"]
                  }
                }
              }
            }
          },
          "_metadata": {
            "type": "object",
            "title": "cpuMetricsMetadata",
            "properties": {
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              },
              "granularity": {
                "type": "string",
                "enum": ["5m", "10m", "30m", "60m"],
                "description": "The provided granularity"
              },
              "summary": {
                "type": "object",
                "title": "cpuMetricsMetadataSummary",
                "properties": {
                  "cpuMetrics": {
                    "type": "object",
                    "properties": {
                      "average": {
                        "type": "string",
                        "description": "Average CPU based on the amount of grouped data points, in percentage",
                        "example": "10 %"
                      },
                      "expected": {
                        "type": "string",
                        "description": "Expected CPU given the average times the amount of days between the `from` and `to` dates, in percentage",
                        "example": "10 %"
                      },
                      "peak": {
                        "title": "cpuMetricsMetadataSummaryPeak",
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The highest CPU usage given the provided aggregation and granularity",
                            "example": "90 %"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "snapshot": {
        "title": "snapshot",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "displayName": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": ["READY", "CREATING"]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "getSnapshotListResult": {
        "type": "object",
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/snapshot"
            }
          },
          "_metadata": {
            "$ref": "#/components/schemas/_metadata"
          }
        }
      }
    },
    "responses": {
      "204": {
        "description": "No Content."
      },
      "400": {
        "description": "Bad Request.",
        "content": {
          "application/json": {
            "example": {
              "correlationId": "289346a1-3eaf-4da4-b707-62ef12eb08be",
              "errorCode": "400",
              "errorDetails": {},
              "errorMessage": "The API could not interpret your request correctly."
            },
            "schema": {
              "$ref": "#/components/schemas/errorResult"
            }
          }
        }
      },
      "401": {
        "description": "Not Authorized.",
        "content": {
          "application/json": {
            "example": {
              "correlationId": "289346a1-3eaf-4da4-b707-62ef12eb08be",
              "errorCode": "401",
              "errorMessage": "You are not authorized to view this resource."
            },
            "schema": {
              "$ref": "#/components/schemas/errorResult"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden.",
        "content": {
          "application/json": {
            "example": {
              "correlationId": "289346a1-3eaf-4da4-b707-62ef12eb08be",
              "errorCode": "403",
              "errorMessage": "Access to the requested resource is forbidden."
            },
            "schema": {
              "$ref": "#/components/schemas/errorResult"
            }
          }
        }
      },
      "404": {
        "description": "Not Found.",
        "content": {
          "application/json": {
            "example": {
              "correlationId": "289346a1-3eaf-4da4-b707-62ef12eb08be",
              "errorCode": "404",
              "errorMessage": "Resource not found"
            },
            "schema": {
              "$ref": "#/components/schemas/errorResult"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error.",
        "content": {
          "application/json": {
            "example": {
              "correlationId": "289346a1-3eaf-4da4-b707-62ef12eb08be",
              "errorCode": "500",
              "errorMessage": "'The API could not handle your request at this time."
            },
            "schema": {
              "$ref": "#/components/schemas/errorResult"
            }
          }
        }
      },
      "503": {
        "description": "Service Unavailable.",
        "content": {
          "application/json": {
            "example": {
              "correlationId": "289346a1-3eaf-4da4-b707-62ef12eb08be",
              "errorCode": "503",
              "errorMessage": "The API is not available at the moment."
            },
            "schema": {
              "$ref": "#/components/schemas/errorResult"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "LeaseWeb API for launching and managing Public Cloud instances",
    "version": "v1",
    "description": "> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/**\n\nThis API provides ways to launch and manage Public Cloud instances.\n\n<div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://developer.leaseweb.com/images/logo.png",
      "altText": "Leaseweb developer documentation",
      "backgroundColor": "#5484c6",
      "href": "http://developer.leaseweb.com"
    },
    "contact": {}
  },
  "openapi": "3.0.0",
  "paths": {
    "/regions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "tags": ["Regions"],
        "summary": "List regions",
        "operationId": "getRegionList",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getRegionListResult"
                },
                "example": {
                  "regions": [
                    {
                      "name": "eu-west-3",
                      "location": "Amsterdam"
                    },
                    {
                      "name": "eu-central-1",
                      "location": "Frankfurt"
                    },
                    {
                      "name": "eu-west-2",
                      "location": "London"
                    },
                    {
                      "name": "ap-southeast-1",
                      "location": "Singapore"
                    },
                    {
                      "name": "ca-central-1",
                      "location": "Montreal"
                    },
                    {
                      "name": "us-east-1",
                      "location": "Washington"
                    },
                    {
                      "name": "us-west-1",
                      "location": "San Francisco"
                    }
                  ],
                  "_metadata": {
                    "totalCount": 7,
                    "limit": 20,
                    "offset": 0
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instanceTypes": {
      "get": {
        "tags": ["Instance Types"],
        "summary": "List instance types",
        "operationId": "getInstanceTypeList",
        "description": "Get instance types",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getInstanceTypeListResult"
                },
                "example": {
                  "instanceTypes": [
                    {
                      "name": "lsw.c3.xlarge",
                      "resources": {
                        "cpu": {
                          "value": 4,
                          "unit": "vCPU"
                        },
                        "memory": {
                          "value": 7,
                          "unit": "GiB"
                        },
                        "publicNetworkSpeed": {
                          "value": 1,
                          "unit": "Gbps"
                        },
                        "privateNetworkSpeed": {
                          "value": 100,
                          "unit": "Mbps"
                        }
                      },
                      "prices": {
                        "currency": "EUR",
                        "currencySymbol": "€",
                        "compute": {
                          "hourlyPrice": "0.0798",
                          "monthlyPrice": "52.5"
                        },
                        "storage": {
                          "local": {
                            "hourlyPrice": "0.0001",
                            "monthlyPrice": "0.03"
                          },
                          "central": {
                            "hourlyPrice": "0.0001",
                            "monthlyPrice": "0.08"
                          }
                        }
                      },
                      "storageTypes": ["CENTRAL", "LOCAL"]
                    }
                  ],
                  "_metadata": {
                    "totalCount": 74,
                    "limit": 1,
                    "offset": 1
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances": {
      "post": {
        "tags": ["Instances"],
        "summary": "Launch instance",
        "operationId": "launchInstance",
        "description": "Launch a Public Cloud instance. \n\nAvailable regions can be obtained using `/v1/regions`.\n\nAvailable Operating Systems can be obtained using `/v1/operatingSystems`.\n\nAvailable instance types for your region can be obtained using `/v1/instanceTypes`.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/launchInstanceOpts"
              },
              "example": {
                "type": "lsw.m3.large",
                "region": "eu-west-3",
                "operatingSystemId": "UBUNTU_20_04_64BIT",
                "reference": "my-webserver",
                "contractTerm": 0,
                "billingFrequency": 1,
                "contractType": "HOURLY",
                "rootDiskSize": 50,
                "rootDiskStorageType": "CENTRAL"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instance"
                },
                "example": {
                  "customerId": "11111111",
                  "id": "6762182e-7ae9-4d0b-b3b7-bea5a49b3f94",
                  "type": "lsw.m3.large",
                  "resources": {
                    "cpu": {
                      "value": 2,
                      "unit": "vCPU"
                    },
                    "memory": {
                      "value": 7,
                      "unit": "GiB"
                    },
                    "publicNetworkSpeed": {
                      "value": 1,
                      "unit": "Gbps"
                    },
                    "privateNetworkSpeed": {
                      "value": 100,
                      "unit": "Mbps"
                    }
                  },
                  "region": "eu-west-3",
                  "reference": "my webserver",
                  "operatingSystem": {
                    "id": "UBUNTU_22_04_64BIT",
                    "name": "Ubuntu 22.04 LTS (x86_64)",
                    "version": "22.04",
                    "family": "linux",
                    "flavour": "ubuntu",
                    "architecture": "x86_64"
                  },
                  "marketAppId": null,
                  "state": "CREATING",
                  "productType": "INSTANCE",
                  "hasPublicIpV4": true,
                  "hasPrivateNetwork": false,
                  "rootDiskSize": 5,
                  "rootDiskStorageType": "CENTRAL",
                  "ips": [],
                  "contract": {
                    "billingFrequency": 1,
                    "term": 0,
                    "type": "HOURLY",
                    "endsAt": null,
                    "renewalsAt": "2024-04-09T15:28:28+00:00",
                    "createdAt": "2024-04-09T15:11:21+00:00",
                    "state": "ACTIVE"
                  },
                  "startedAt": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "get": {
        "tags": ["Instances"],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "ip",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "format": "ip"
            },
            "example": "10.0.0.1"
          },
          {
            "name": "reference",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "my-webserver"
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          {
            "name": "contractType",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/contractType"
            }
          },
          {
            "name": "contractState",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/contractState"
            }
          },
          {
            "name": "operatingSystemId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Available Operating Systems can be obtained using `/v1/operatingSystems`.",
            "example": "UBUNTU_22_04_64BIT"
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "RUNNING",
                "STARTING",
                "STOPPED",
                "STOPPING",
                "CREATING",
                "DESTROYED",
                "DESTROYING"
              ]
            },
            "example": "RUNNING"
          },
          {
            "name": "region",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "eu-west-3",
            "description": "Available regions can be obtained using `/v1/regions`"
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "lsw.c3.xlarge",
            "description": "Available instance types for your region can be obtained using `/v1/instanceTypes`."
          }
        ],
        "summary": "Get instance list",
        "operationId": "getInstanceList",
        "description": "List and filter instances",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "instances": [
                    {
                      "customerId": "11111111",
                      "id": "5fd135a9-3ff6-4794-8b92-8cd8747a3ea3",
                      "type": "lsw.c3.4xlarge",
                      "resources": {
                        "cpu": {
                          "value": 16,
                          "unit": "vCPU"
                        },
                        "memory": {
                          "value": 30,
                          "unit": "GiB"
                        },
                        "publicNetworkSpeed": {
                          "value": 1,
                          "unit": "Gbps"
                        },
                        "privateNetworkSpeed": {
                          "value": 100,
                          "unit": "Mbps"
                        }
                      },
                      "region": "eu-west-3",
                      "reference": "my-webserver",
                      "operatingSystem": {
                        "id": "UBUNTU_22_04_64BIT",
                        "name": "Ubuntu 22.04 LTS (x86_64)",
                        "version": "22.04",
                        "family": "linux",
                        "flavour": "ubuntu",
                        "architecture": "x86_64"
                      },
                      "state": "RUNNING",
                      "hasPublicIpV4": true,
                      "hasPrivateNetwork": false,
                      "rootDiskSize": 10,
                      "ips": [
                        {
                          "ip": "10.32.60.12",
                          "prefixLength": "32",
                          "version": 4,
                          "nullRouted": false,
                          "reverseLookup": null,
                          "mainIp": false,
                          "networkType": "INTERNAL"
                        }
                      ],
                      "startedAt": "2024-04-09T15:11:37+00:00",
                      "contract": {
                        "billingFrequency": 1,
                        "term": 0,
                        "type": "HOURLY",
                        "endsAt": null,
                        "renewalsAt": "2024-04-09T15:28:28+00:00",
                        "createdAt": "2024-04-09T15:11:21+00:00",
                        "state": "ACTIVE"
                      }
                    }
                  ],
                  "_metadata": {
                    "totalCount": 1,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getInstanceListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "get": {
        "tags": ["Instances"],
        "summary": "Get instance details",
        "operationId": "getInstance",
        "description": "Get details about the instance",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "customerId": "11111111",
                  "id": "ace712e9-a166-47f1-9065-4af0f7e7fce1",
                  "type": "lsw.m3.large",
                  "resources": {
                    "cpu": {
                      "value": 2,
                      "unit": "vCPU"
                    },
                    "memory": {
                      "value": 7,
                      "unit": "GiB"
                    },
                    "publicNetworkSpeed": {
                      "value": 1,
                      "unit": "Gbps"
                    },
                    "privateNetworkSpeed": {
                      "value": 100,
                      "unit": "Mbps"
                    }
                  },
                  "region": "eu-west-3",
                  "reference": "my instance",
                  "operatingSystem": {
                    "id": "UBUNTU_22_04_64BIT",
                    "name": "Ubuntu 22.04 LTS (x86_64)",
                    "version": "22.04",
                    "family": "linux",
                    "flavour": "ubuntu",
                    "architecture": "x86_64"
                  },
                  "marketAppId": null,
                  "state": "STOPPED",
                  "productType": "INSTANCE",
                  "hasPublicIpV4": true,
                  "hasPrivateNetwork": false,
                  "rootDiskSize": 5,
                  "rootDiskStorageType": "CENTRAL",
                  "ips": [
                    {
                      "ip": "10.32.60.12",
                      "prefixLength": "27",
                      "version": 4,
                      "nullRouted": false,
                      "reverseLookup": null,
                      "mainIp": false,
                      "networkType": "INTERNAL",
                      "ddos": {
                        "detectionProfile": "STANDARD_DEFAULT",
                        "protectionType": "STANDARD"
                      }
                    }
                  ],
                  "contract": {
                    "billingFrequency": 1,
                    "term": 0,
                    "type": "HOURLY",
                    "endsAt": null,
                    "renewalsAt": "2024-04-09T15:28:28+00:00",
                    "createdAt": "2024-04-09T15:11:21+00:00",
                    "state": "ACTIVE"
                  },
                  "startedAt": "2024-04-11T12:59:34+00:00",
                  "iso": null,
                  "privateNetwork": null
                },
                "schema": {
                  "$ref": "#/components/schemas/instance"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": ["Instances"],
        "summary": "Terminate instance",
        "operationId": "terminateInstance",
        "description": "Terminate Public Cloud instance",
        "responses": {
          "200": {
            "description": "If instance is hourly, it is scheduled for termination immediately, otherwise, will be marked for termination at the date specified by the instance's field `contractEndAt`"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "tags": ["Instances"],
        "summary": "Update instance",
        "operationId": "updateInstance",
        "description": "Update the instance's reference, type, storage or contract type.\n\nEligible instance types for update can be obtained using `/v1/instances/{instanceId}/instanceTypesUpdate`.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateInstanceOpts"
              },
              "examples": {
                "reference": {
                  "summary": "Update only reference",
                  "value": {
                    "reference": "new-reference"
                  }
                },
                "type": {
                  "summary": "Update only type",
                  "value": {
                    "type": "lsw.m4.xlarge"
                  }
                },
                "type-and-root-disk-size": {
                  "summary": "Update type and root disk size from 10 to 20 GB",
                  "value": {
                    "type": "lsw.m4.xlarge",
                    "rootDiskSize": 20
                  }
                },
                "type-and-contract-type": {
                  "summary": "Update contract type from HOURLY to MONTHLY",
                  "value": {
                    "contractType": "MONTHLY",
                    "contractTerm": 1,
                    "billingFrequency": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instance"
                },
                "example": {
                  "customerId": "111111111",
                  "salesOrgId": "2000",
                  "id": "15ca75e3-5b36-44af-98fe-e96cf402d17e",
                  "type": "lsw.m3.large",
                  "resources": {
                    "cpu": {
                      "value": 1,
                      "unit": "vCPU"
                    },
                    "memory": {
                      "value": 3,
                      "unit": "GiB"
                    },
                    "publicNetworkSpeed": {
                      "value": 1,
                      "unit": "Gbps"
                    },
                    "privateNetworkSpeed": {
                      "value": 100,
                      "unit": "Mbps"
                    }
                  },
                  "region": "eu-west-3",
                  "reference": "web server",
                  "operatingSystem": {
                    "id": "UBUNTU_20_04_64BIT",
                    "name": "Ubuntu 20.04 LTS (x86_64)",
                    "version": "20.04",
                    "family": "linux",
                    "flavour": "ubuntu",
                    "architecture": "x86_64"
                  },
                  "state": "RUNNING",
                  "hasPublicIpV4": true,
                  "hasPrivateNetwork": false,
                  "rootDiskSize": 5,
                  "ips": [
                    {
                      "ip": "10.32.60.12",
                      "prefixLength": "27",
                      "version": 4,
                      "reverseLookup": null,
                      "mainIp": false,
                      "networkType": "INTERNAL",
                      "nullRouted": false,
                      "ddos": {
                        "detectionProfile": "STANDARD_DEFAULT",
                        "protectionType": "STANDARD"
                      }
                    }
                  ],
                  "startedAt": "2024-04-09T15:11:37+00:00",
                  "contract": {
                    "billingFrequency": 1,
                    "term": 0,
                    "type": "HOURLY",
                    "endsAt": null,
                    "renewalsAt": "2024-04-09T15:28:28+00:00",
                    "createdAt": "2024-04-09T15:11:21+00:00",
                    "state": "ACTIVE"
                  },
                  "iso": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/cancelTermination": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "post": {
        "tags": ["Instances"],
        "summary": "Cancel instance termination",
        "operationId": "cancelInstanceTermination",
        "description": "Cancel the termination process of monthly instances. Must be executed prior to the instance's `contractEndsAt`.",
        "responses": {
          "204": {
            "description": "No content. Cancellation has been cancelled and contract is reinstated."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "post": {
        "tags": ["Power"],
        "summary": "Start instance",
        "operationId": "startInstance",
        "description": "The instance must be stopped before the execution",
        "responses": {
          "202": {
            "description": "Request has been accepted and instance is going to be started soon"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "post": {
        "tags": ["Power"],
        "summary": "Stop instance",
        "operationId": "stopInstance",
        "description": "The instance must be running before the execution",
        "responses": {
          "202": {
            "description": "Request has been accepted and instance is going to be stopped soon"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/reboot": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "post": {
        "tags": ["Power"],
        "summary": "Reboot instance",
        "operationId": "rebootInstance",
        "description": "The instance must be running before the execution",
        "responses": {
          "202": {
            "description": "Request has been accepted and instance is going to be rebooted soon"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/console": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "get": {
        "tags": ["Instances"],
        "summary": "Get console access",
        "operationId": "getConsoleAccessToInstance",
        "description": "Get console access to the instance",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "url": "http://public-cloud.leaseweb.com/resource/noVNC/vnc.html?autoconnect=true&port=8080&token=dvoPyDxbBl8LC9OsXI55CmAUmUA50lY19b0/v/7jrA6VkrdflVWw8S2XuxDZrBaaSo4XdBAYmpfqC0kUr2aOVHjMlGFb6movdnKNxvMOEmC0spwU9XbdZJrWXzGicCLT4X4GMxgN13nn1oDQb8k9ag2rMMxENyiPZ3bbV1iGuL4cWLEMad8hHFXjJ7P2MvbnpiasXK5wKuHadrR76778ZM22xxzvjarg9S6bAWziH1u3VdKIQyJMIrDmAdjYRqL1IHqrN+uLrY6WPzv+s51lnNYd0zeQtB7YWBZup8VDcZSt5C0GrYnZx3Vh4fXWOOsFlWZgdEGKf9oM9y9RX2G/jLlVeVv4LmVCN02GRr7SAfyx8WcuWGXS7WsxpXTzdxWEm9EMZDrPQhFiZKo20PXRdgT6KbdnqCI/j8z5iPAKGO3YI5BcK5sUdhHgFUMNgJUw/qhz71/xivIP8UKrWVgZMRWXmt6hNWIeHLqrdZ0n5m9It4Os8UaKgeBvwlFTpzNTUWxvoI0+2sa8GAmW3RCe9mfK3xvW/iy1MZ651cALLVmoj6imZl7K7P33iQ=="
                },
                "schema": {
                  "$ref": "#/components/schemas/getConsoleAccessToInstanceResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/instanceTypesUpdate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "get": {
        "tags": ["Instances"],
        "summary": "List available instance types for update",
        "operationId": "getUpdateInstanceTypeList",
        "description": "Get available instance types for update",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getUpdateInstanceTypeListResult"
                },
                "example": {
                  "instanceTypes": [
                    {
                      "name": "lsw.m3.xlarge",
                      "resources": {
                        "cpu": {
                          "value": 4,
                          "unit": "vCPU"
                        },
                        "memory": {
                          "value": 15,
                          "unit": "GiB"
                        },
                        "publicNetworkSpeed": {
                          "value": 1,
                          "unit": "Gbps"
                        },
                        "privateNetworkSpeed": {
                          "value": 100,
                          "unit": "Mbps"
                        }
                      },
                      "prices": {
                        "eu-west-2": {
                          "currency": "GBP",
                          "currencySymbol": "£",
                          "compute": {
                            "hourlyPrice": "0.0783",
                            "monthlyPrice": "51.5000"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.02604"
                            },
                            "central": {
                              "hourlyPrice": "0.00010",
                              "monthlyPrice": "0.06944"
                            }
                          }
                        },
                        "ca-central-1": {
                          "currency": "CAD",
                          "currencySymbol": "CA$",
                          "compute": {
                            "hourlyPrice": "0.1347",
                            "monthlyPrice": "88.5800"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00006",
                              "monthlyPrice": "0.04479"
                            },
                            "central": {
                              "hourlyPrice": "0.00016",
                              "monthlyPrice": "0.11944"
                            }
                          }
                        },
                        "eu-west-3": {
                          "currency": "EUR",
                          "currencySymbol": "€",
                          "compute": {
                            "hourlyPrice": "0.0902",
                            "monthlyPrice": "59.3300"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03000"
                            },
                            "central": {
                              "hourlyPrice": "0.00011",
                              "monthlyPrice": "0.08000"
                            }
                          }
                        },
                        "eu-central-1": {
                          "currency": "EUR",
                          "currencySymbol": "€",
                          "compute": {
                            "hourlyPrice": "0.0902",
                            "monthlyPrice": "59.3300"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03000"
                            },
                            "central": {
                              "hourlyPrice": "0.00011",
                              "monthlyPrice": "0.08000"
                            }
                          }
                        },
                        "us-east-1": {
                          "currency": "USD",
                          "currencySymbol": "$",
                          "compute": {
                            "hourlyPrice": "0.0986",
                            "monthlyPrice": "64.7900"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03276"
                            },
                            "central": {
                              "hourlyPrice": "0.00012",
                              "monthlyPrice": "0.08736"
                            }
                          }
                        },
                        "us-west-1": {
                          "currency": "USD",
                          "currencySymbol": "$",
                          "compute": {
                            "hourlyPrice": "0.0986",
                            "monthlyPrice": "64.7900"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03276"
                            },
                            "central": {
                              "hourlyPrice": "0.00012",
                              "monthlyPrice": "0.08736"
                            }
                          }
                        },
                        "ap-southeast-1": {
                          "currency": "SGD",
                          "currencySymbol": "S$",
                          "compute": {
                            "hourlyPrice": "0.1318",
                            "monthlyPrice": "86.6300"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00006",
                              "monthlyPrice": "0.04380"
                            },
                            "central": {
                              "hourlyPrice": "0.00016",
                              "monthlyPrice": "0.11680"
                            }
                          }
                        }
                      },
                      "storageTypes": null
                    },
                    {
                      "name": "lsw.m3.2xlarge",
                      "resources": {
                        "cpu": {
                          "value": 8,
                          "unit": "vCPU"
                        },
                        "memory": {
                          "value": 30,
                          "unit": "GiB"
                        },
                        "publicNetworkSpeed": {
                          "value": 1,
                          "unit": "Gbps"
                        },
                        "privateNetworkSpeed": {
                          "value": 100,
                          "unit": "Mbps"
                        }
                      },
                      "prices": {
                        "eu-west-2": {
                          "currency": "GBP",
                          "currencySymbol": "£",
                          "compute": {
                            "hourlyPrice": "0.1562",
                            "monthlyPrice": "102.6500"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.02604"
                            },
                            "central": {
                              "hourlyPrice": "0.00010",
                              "monthlyPrice": "0.06944"
                            }
                          }
                        },
                        "ca-central-1": {
                          "currency": "CAD",
                          "currencySymbol": "CA$",
                          "compute": {
                            "hourlyPrice": "0.2687",
                            "monthlyPrice": "176.5700"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00006",
                              "monthlyPrice": "0.04479"
                            },
                            "central": {
                              "hourlyPrice": "0.00016",
                              "monthlyPrice": "0.11944"
                            }
                          }
                        },
                        "eu-west-3": {
                          "currency": "EUR",
                          "currencySymbol": "€",
                          "compute": {
                            "hourlyPrice": "0.1799",
                            "monthlyPrice": "118.2700"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03000"
                            },
                            "central": {
                              "hourlyPrice": "0.00011",
                              "monthlyPrice": "0.08000"
                            }
                          }
                        },
                        "eu-central-1": {
                          "currency": "EUR",
                          "currencySymbol": "€",
                          "compute": {
                            "hourlyPrice": "0.1799",
                            "monthlyPrice": "118.2700"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03000"
                            },
                            "central": {
                              "hourlyPrice": "0.00011",
                              "monthlyPrice": "0.08000"
                            }
                          }
                        },
                        "us-east-1": {
                          "currency": "USD",
                          "currencySymbol": "$",
                          "compute": {
                            "hourlyPrice": "0.1965",
                            "monthlyPrice": "129.1500"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03276"
                            },
                            "central": {
                              "hourlyPrice": "0.00012",
                              "monthlyPrice": "0.08736"
                            }
                          }
                        },
                        "us-west-1": {
                          "currency": "USD",
                          "currencySymbol": "$",
                          "compute": {
                            "hourlyPrice": "0.1965",
                            "monthlyPrice": "129.1500"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00004",
                              "monthlyPrice": "0.03276"
                            },
                            "central": {
                              "hourlyPrice": "0.00012",
                              "monthlyPrice": "0.08736"
                            }
                          }
                        },
                        "ap-southeast-1": {
                          "currency": "SGD",
                          "currencySymbol": "S$",
                          "compute": {
                            "hourlyPrice": "0.2627",
                            "monthlyPrice": "172.6700"
                          },
                          "storage": {
                            "local": {
                              "hourlyPrice": "0.00006",
                              "monthlyPrice": "0.04380"
                            },
                            "central": {
                              "hourlyPrice": "0.00016",
                              "monthlyPrice": "0.11680"
                            }
                          }
                        }
                      },
                      "storageTypes": null
                    }
                  ],
                  "_metadata": {
                    "totalCount": 2,
                    "limit": 50,
                    "offset": 0
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/credentials": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "get": {
        "tags": ["Credentials"],
        "summary": "List credentials stored for instance",
        "operationId": "getCredentialList",
        "description": "Get all credentials stored for the instance",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "credentials": [
                    {
                      "type": "OPERATING_SYSTEM",
                      "username": "root"
                    }
                  ],
                  "_metadata": {
                    "totalCount": 1,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getCredentialListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": ["Credentials"],
        "summary": "Store credentials",
        "operationId": "storeCredential",
        "description": "Store credential used for the instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storeCredentialOpts"
              },
              "example": {
                "type": "OPERATING_SYSTEM",
                "username": "another-user",
                "password": "a$Ndes-3fad2-rfas@-"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "type": "OPERATING_SYSTEM",
                  "username": "another-user",
                  "password": "a$Ndes-3fad2-rfas@-"
                },
                "schema": {
                  "$ref": "#/components/schemas/storeCredentialResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": ["Credentials"],
        "summary": "Delete all instance credentials",
        "operationId": "deleteCredentials",
        "description": "Delete all credentials stored for a given instance",
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/credentials/{type}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "required": true,
          "name": "type",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "example": "OPERATING_SYSTEM"
        }
      ],
      "get": {
        "tags": ["Credentials"],
        "summary": "Get credentials by type",
        "operationId": "getCredentialListByType",
        "description": "Get credentials stored for the instance by their types",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "credentials": [
                    {
                      "type": "OPERATING_SYSTEM",
                      "username": "root"
                    }
                  ],
                  "_metadata": {
                    "totalCount": 1,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getCredentialListByTypeResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/credentials/{type}/{username}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "name": "type",
          "description": "Credential type",
          "example": "OPERATING_SYSTEM",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "username",
          "description": "Username",
          "example": "root",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Credentials"],
        "summary": "Get credentials by type and username",
        "operationId": "getCredential",
        "description": "Get credentials by type and username",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "type": "OPERATING_SYSTEM",
                  "username": "root",
                  "password": "12341234"
                },
                "schema": {
                  "$ref": "#/components/schemas/getCredentialResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "tags": ["Credentials"],
        "summary": "Update credentials",
        "operationId": "updateCredential",
        "description": "Update credentials for a given type and username",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCredentialOpts"
              },
              "example": {
                "password": "@-n3w-Pa$$w0rD"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "type": "OPERATING_SYSTEM",
                  "username": "another-user",
                  "password": "@-n3w-Pa$$w0rD"
                },
                "schema": {
                  "$ref": "#/components/schemas/updateCredentialResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": ["Credentials"],
        "summary": "Delete credentials",
        "operationId": "deleteCredential",
        "description": "Delete credential for a given type and username",
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/resetPassword": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "post": {
        "tags": ["Credentials"],
        "summary": "Reset instance password",
        "operationId": "resetPassword",
        "description": "The operation may take a few moments to complete.\n\nYou can obtain the new credential using the credentials endpoints",
        "responses": {
          "202": {
            "description": "Accepted. Reinstall process has started, it may take a few moments to complete."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/equipments/{equipmentId}/expenses": {
      "parameters": [
        {
          "$ref": "#/components/parameters/equipmentId"
        }
      ],
      "get": {
        "tags": ["Expenses"],
        "summary": "Get costs for a given month.",
        "operationId": "getExpenses",
        "parameters": [
          {
            "name": "from",
            "required": true,
            "description": "Start date of the period to get costs for. It must be the first day of the month",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2023-11-01"
          },
          {
            "name": "to",
            "required": false,
            "description": "End date of the period to get costs for. This date needs to be exactly one month after the 'from' date. If this value is not passed, it will be calculated based on 'from' parameter",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2023-12-01"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpensesResult"
                },
                "example": {
                  "billing": {
                    "instances": [
                      {
                        "id": "b778824a-a96e-4f6f-9713-7b7196f09c4f",
                        "reference": "test-instance",
                        "resources": {
                          "cpu": {
                            "value": 2,
                            "unit": "vCPU"
                          },
                          "memory": {
                            "value": 8,
                            "unit": "GB"
                          },
                          "publicNetworkSpeed": {
                            "value": 5,
                            "unit": "Gbps"
                          },
                          "privateNetworkSpeed": {
                            "value": 1000,
                            "unit": "Mbps"
                          }
                        },
                        "contract": {
                          "billingFrequency": 1,
                          "term": 0,
                          "type": "HOURLY",
                          "endsAt": null,
                          "renewalsAt": "2024-04-09T15:28:28+00:00",
                          "createdAt": "2024-04-09T15:11:21+00:00",
                          "state": "ACTIVE"
                        },
                        "startedAt": "2023-11-30T16:31:46+00:00",
                        "endedAt": "2023-11-30T16:40:46+00:00",
                        "rootDiskSize": 15,
                        "billingType": "POSTPAID",
                        "hours": 14,
                        "from": "2023-12-01T00:00:00+00:00",
                        "to": "2023-12-01T13:18:41+00:00",
                        "rootDiskType": "CENTRAL",
                        "price": "0.72"
                      }
                    ],
                    "traffic": {
                      "unit": "GB",
                      "values": {
                        "tier_0": {
                          "usage": 1000,
                          "price": 0
                        },
                        "tier_1": {
                          "usage": 10000,
                          "price": 15.54
                        },
                        "tier_2": {
                          "usage": 10000,
                          "price": 13.45
                        },
                        "tier_3": {
                          "usage": 34.5,
                          "price": 2.34
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/isos": {
      "parameters": [
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "tags": ["ISOs"],
        "summary": "List available ISOs",
        "operationId": "getIsoList",
        "description": "List all available ISO images",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "isos": [
                    {
                      "id": "GRML",
                      "name": "GRML 2022.11"
                    },
                    {
                      "id": "ACRONIS_BOOT_MEDIA",
                      "name": "Acronis Boot Media"
                    }
                  ],
                  "_metadata": {
                    "totalCount": 2,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getIsoListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/operatingSystems": {
      "parameters": [
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "tags": ["Operating Systems"],
        "summary": "List all available Operating Systems",
        "operationId": "getOperatingSystemList",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "operatingSystems": [
                    {
                      "id": "UBUNTU_22_04_64BIT",
                      "name": "Ubuntu 22.04 LTS (x86_64)",
                      "version": "22.04",
                      "family": "linux",
                      "flavour": "ubuntu",
                      "architecture": "x86_64",
                      "marketApps": ["LOADBALANCER"],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "UBUNTU_20_04_64BIT",
                      "name": "Ubuntu 20.04 LTS (x86_64)",
                      "version": "20.04",
                      "family": "linux",
                      "flavour": "ubuntu",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "DEBIAN_12_64BIT",
                      "name": "Debian 12 (x86_64)",
                      "version": "12",
                      "family": "linux",
                      "flavour": "debian",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "DEBIAN_11_64BIT",
                      "name": "Debian 11 (x86_64)",
                      "version": "11",
                      "family": "linux",
                      "flavour": "debian",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "DEBIAN_10_64BIT",
                      "name": "Debian 10 (x86_64)",
                      "version": "10",
                      "family": "linux",
                      "flavour": "debian",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "FREEBSD_13_64BIT",
                      "name": "FreeBSD 13.2 (x86_64)",
                      "version": "13.2",
                      "family": "bsd",
                      "flavour": "freebsd",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "CENTOS_7_64BIT",
                      "name": "CentOS 7 (x86_64)",
                      "version": "7",
                      "family": "linux",
                      "flavour": "centos",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "ALMALINUX_9_64BIT",
                      "name": "AlmaLinux 9 (x86_64)",
                      "version": "9",
                      "family": "linux",
                      "flavour": "almalinux",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "ALMALINUX_8_64BIT",
                      "name": "AlmaLinux 8 (x86_64)",
                      "version": "8",
                      "family": "linux",
                      "flavour": "almalinux",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "ROCKY_LINUX_9_64BIT",
                      "name": "Rocky Linux 9 (x86_64)",
                      "version": "9",
                      "family": "linux",
                      "flavour": "rockylinux",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "ROCKY_LINUX_8_64BIT",
                      "name": "Rocky Linux 8 (x86_64)",
                      "version": "8",
                      "family": "linux",
                      "flavour": "rockylinux",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["LOCAL", "CENTRAL"]
                    },
                    {
                      "id": "WINDOWS_SERVER_2022_STANDARD_64BIT",
                      "name": "Windows Server 2022 Standard (x64)",
                      "version": "2022",
                      "family": "windows",
                      "flavour": "windows",
                      "architecture": "x86_64",
                      "marketApps": [],
                      "storageTypes": ["CENTRAL"]
                    }
                  ],
                  "_metadata": {
                    "totalCount": 12,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getOperatingSystemListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/marketApps": {
      "get": {
        "tags": ["Marketplace Apps"],
        "summary": "Get marketplace apps",
        "description": "Get all available marketplace apps.",
        "operationId": "getMarketAppList",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "marketApps": [
                    {
                      "id": "LOADBALANCER",
                      "name": "Load Balancer",
                      "category": "LOAD_BALANCER",
                      "version": null,
                      "family": "loadbalancer",
                      "operatingSystem": {
                        "id": "UBUNTU_22_04_64BIT",
                        "name": "Ubuntu 22.04 LTS (x86_64)",
                        "version": "22.04",
                        "family": "linux",
                        "flavour": "ubuntu",
                        "architecture": "x86_64"
                      }
                    }
                  ],
                  "_metadata": {
                    "totalCount": 1,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getMarketAppListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/attachIso": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "post": {
        "tags": ["ISOs"],
        "summary": "Attach ISO to instance",
        "description": "Instance must not have ISO attached, otherwise, it will return a validation error.\n\nAvailable ISOs can be obtained using `/v1/isos`.",
        "operationId": "attachIso",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attachIsoOpts"
              },
              "example": {
                "isoId": "GRML"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/detachIso": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "post": {
        "tags": ["ISOs"],
        "summary": "Detach ISO from instance",
        "description": "Instance must have ISO attached, otherwise, it will return a validation error",
        "operationId": "detachIso",
        "responses": {
          "202": {
            "description": "Accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/reinstall/operatingSystems": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "get": {
        "tags": ["Instances"],
        "summary": "List OSes available for reinstall",
        "operationId": "getReinstallOsList",
        "description": "List Operating Systems available for reinstall",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "UBUNTU_22_04_64BIT",
                    "name": "Ubuntu 22.04 LTS (x86_64)",
                    "version": "22.04",
                    "family": "linux",
                    "flavour": "ubuntu",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "UBUNTU_20_04_64BIT",
                    "name": "Ubuntu 20.04 LTS (x86_64)",
                    "version": "20.04",
                    "family": "linux",
                    "flavour": "ubuntu",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "DEBIAN_12_64BIT",
                    "name": "Debian 12 (x86_64)",
                    "version": "12",
                    "family": "linux",
                    "flavour": "debian",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "DEBIAN_11_64BIT",
                    "name": "Debian 11 (x86_64)",
                    "version": "11",
                    "family": "linux",
                    "flavour": "debian",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "DEBIAN_10_64BIT",
                    "name": "Debian 10 (x86_64)",
                    "version": "10",
                    "family": "linux",
                    "flavour": "debian",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "CENTOS_7_64BIT",
                    "name": "CentOS 7 (x86_64)",
                    "version": "7",
                    "family": "linux",
                    "flavour": "centos",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "ALMALINUX_9_64BIT",
                    "name": "AlmaLinux 9 (x86_64)",
                    "version": "9",
                    "family": "linux",
                    "flavour": "almalinux",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "ALMALINUX_8_64BIT",
                    "name": "AlmaLinux 8 (x86_64)",
                    "version": "8",
                    "family": "linux",
                    "flavour": "almalinux",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "ROCKY_LINUX_9_64BIT",
                    "name": "Rocky Linux 9 (x86_64)",
                    "version": "9",
                    "family": "linux",
                    "flavour": "rockylinux",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "ROCKY_LINUX_8_64BIT",
                    "name": "Rocky Linux 8 (x86_64)",
                    "version": "8",
                    "family": "linux",
                    "flavour": "rockylinux",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "FREEBSD_13_64BIT",
                    "name": "FreeBSD 13.2 (x86_64)",
                    "version": "13.2",
                    "family": "bsd",
                    "flavour": "freebsd",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  },
                  {
                    "id": "FREEBSD_14_64BIT",
                    "name": "FreeBSD 14.0 (x86_64)",
                    "version": "14.0",
                    "family": "bsd",
                    "flavour": "freebsd",
                    "architecture": "x86_64",
                    "marketApps": [],
                    "storageTypes": ["LOCAL", "CENTRAL"]
                  }
                ],
                "schema": {
                  "$ref": "#/components/schemas/getReinstallOsListResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/reinstall": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "put": {
        "tags": ["Instances"],
        "summary": "Reinstall instance",
        "description": "Recreates the instance, with optionally different Operating System and Marketplace App.\n\nCannot be performed when the instance has snapshots.\n\nAvailable Operating Systems can be obtained using `/v1/instances/{instanceId}/reinstall/operatingSystems`.\n\nAvailable Marketplace Apps can be obtained using `/v1/operatingSystems/{operatingSystemId}/marketApps`.",
        "operationId": "reinstallInstance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reinstallInstanceOpts"
              },
              "example": {
                "operatingSystemId": "UBUNTU_22_04_64BIT"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. The reinstall process has started and may take a few moments to complete."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/loadBalancers": {
      "post": {
        "tags": ["Load Balancer"],
        "summary": "Launch Load balancer",
        "operationId": "launchLoadBalancer",
        "description": "Launch a Load balancer. \n\nAvailable regions can be obtained using `/v1/regions`.\n\nAvailable load balancer types for your region can be obtained using `/v1/loadBalancerTypes`.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/launchLoadBalancerOpts"
              },
              "example": {
                "type": "lsw.m3.large",
                "region": "eu-west-3",
                "reference": "my-loadbalancer-1",
                "billingFrequency": 1,
                "contractType": "HOURLY",
                "rootDiskStorageType": "CENTRAL",
                "targetPort": 443
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loadBalancer"
                },
                "example": {
                  "customerId": "11111111",
                  "id": "d930cf34-0fdb-406d-b3d0-75add3eb5efe",
                  "type": "lsw.c3.large",
                  "resources": {
                    "cpu": {
                      "value": 2,
                      "unit": "vCPU"
                    },
                    "memory": {
                      "value": 3,
                      "unit": "GiB"
                    },
                    "publicNetworkSpeed": {
                      "value": 1,
                      "unit": "Gbps"
                    },
                    "privateNetworkSpeed": {
                      "value": 100,
                      "unit": "Mbps"
                    }
                  },
                  "region": "eu-west-3",
                  "reference": "my-loadbalancer1",
                  "state": "RUNNING",
                  "ips": [
                    {
                      "ip": "85.99.99.99",
                      "prefixLength": "28",
                      "version": 4,
                      "nullRouted": false,
                      "reverseLookup": null,
                      "mainIp": false,
                      "networkType": "PUBLIC",
                      "ddos": {
                        "detectionProfile": "STANDARD_DEFAULT",
                        "protectionType": "STANDARD"
                      }
                    }
                  ],
                  "startedAt": "2024-04-09T15:11:37+00:00",
                  "contract": {
                    "billingFrequency": 1,
                    "term": 0,
                    "type": "HOURLY",
                    "endsAt": null,
                    "renewalsAt": "2024-04-09T15:28:28+00:00",
                    "createdAt": "2024-04-09T15:11:21+00:00",
                    "state": "ACTIVE"
                  },
                  "configuration": {
                    "stickySession": null,
                    "balance": "ROUNDROBIN",
                    "healthCheck": null,
                    "xForwardedFor": false,
                    "idleTimeOut": 60
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "get": {
        "tags": ["Load Balancer"],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "ip",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "format": "ip"
            },
            "example": "10.0.0.1"
          },
          {
            "name": "reference",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "my-lb"
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          {
            "name": "contractState",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/contractState"
            }
          },
          {
            "name": "contractType",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["HOURLY", "MONTHLY"]
            },
            "example": "HOURLY"
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "RUNNING",
                "STARTING",
                "STOPPED",
                "STOPPING",
                "CREATING",
                "DESTROYED",
                "DESTROYING"
              ]
            },
            "example": "RUNNING"
          },
          {
            "name": "region",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "eu-west-3",
            "description": "Available regions can be found using the List Regions endpoint."
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "lsw.c3.xlarge",
            "description": "Available load balancer types can be found using the List Load Balancer Types endpoint."
          }
        ],
        "summary": "Get load balancer list",
        "operationId": "getLoadBalancerList",
        "description": "List and filter load balancers",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "loadBalancers": [
                    {
                      "customerId": "11111111",
                      "id": "5fd135a9-3ff6-4794-8b92-8cd8747a3ea3",
                      "type": "lsw.c3.4xlarge",
                      "resources": {
                        "cpu": {
                          "value": 16,
                          "unit": "vCPU"
                        },
                        "memory": {
                          "value": 30,
                          "unit": "GiB"
                        },
                        "publicNetworkSpeed": {
                          "value": 1,
                          "unit": "Gbps"
                        },
                        "privateNetworkSpeed": {
                          "value": 100,
                          "unit": "Mbps"
                        }
                      },
                      "region": "eu-west-3",
                      "reference": "my-load-balancer",
                      "state": "RUNNING",
                      "rootDiskSize": 10,
                      "ips": [
                        {
                          "ip": "85.99.99.99",
                          "prefixLength": "28",
                          "version": 4,
                          "nullRouted": false,
                          "reverseLookup": null,
                          "networkType": "PUBLIC",
                          "mainIp": false,
                          "ddos": {
                            "detectionProfile": "STANDARD_DEFAULT",
                            "protectionType": "STANDARD"
                          }
                        }
                      ],
                      "startedAt": "2024-04-09T15:11:37+00:00",
                      "contract": {
                        "billingFrequency": 1,
                        "term": 0,
                        "type": "HOURLY",
                        "endsAt": null,
                        "renewalsAt": "2024-04-09T15:28:28+00:00",
                        "createdAt": "2024-04-09T15:11:21+00:00",
                        "state": "ACTIVE"
                      },
                      "configuration": {
                        "stickySession": {
                          "enabled": true,
                          "maxLifeTime": 1000
                        },
                        "balance": "ROUNDROBIN",
                        "healthCheck": {
                          "method": "GET",
                          "uri": "/",
                          "host": null,
                          "port": 80
                        },
                        "xForwardedFor": false,
                        "idleTimeOut": 60,
                        "targetPort": 442
                      }
                    }
                  ],
                  "_metadata": {
                    "totalCount": 1,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getLoadBalancerListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/loadBalancers/{loadBalancerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/loadBalancerId"
        }
      ],
      "get": {
        "tags": ["Load Balancer"],
        "summary": "Get load balancer details",
        "operationId": "getLoadBalancer",
        "description": "Get details about the load balancer",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "customerId": "11111111",
                  "id": "d930cf34-0fdb-406d-b3d0-75add3eb5efe",
                  "type": "lsw.c3.large",
                  "resources": {
                    "cpu": {
                      "value": 2,
                      "unit": "vCPU"
                    },
                    "memory": {
                      "value": 3,
                      "unit": "GiB"
                    },
                    "publicNetworkSpeed": {
                      "value": 1,
                      "unit": "Gbps"
                    },
                    "privateNetworkSpeed": {
                      "value": 100,
                      "unit": "Mbps"
                    }
                  },
                  "region": "eu-west-3",
                  "reference": "my-loadbalancer1",
                  "state": "RUNNING",
                  "ips": [
                    {
                      "ip": "85.99.99.99",
                      "prefixLength": "28",
                      "version": 4,
                      "nullRouted": false,
                      "reverseLookup": null,
                      "mainIp": false,
                      "networkType": "PUBLIC",
                      "ddos": {
                        "detectionProfile": "STANDARD_DEFAULT",
                        "protectionType": "STANDARD"
                      }
                    }
                  ],
                  "startedAt": "2024-04-09T15:11:37+00:00",
                  "contract": {
                    "billingFrequency": 1,
                    "term": 0,
                    "type": "HOURLY",
                    "endsAt": null,
                    "renewalsAt": "2024-04-09T15:28:28+00:00",
                    "createdAt": "2024-04-09T15:11:21+00:00",
                    "state": "ACTIVE"
                  },
                  "configuration": {
                    "stickySession": null,
                    "balance": "ROUNDROBIN",
                    "healthCheck": null,
                    "xForwardedFor": false,
                    "idleTimeOut": 60
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/loadBalancer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": ["Load Balancer"],
        "summary": "Delete load balancer",
        "operationId": "terminateLoadBalancer",
        "description": "Terminate a Load balancer",
        "responses": {
          "202": {
            "description": "If load balancer contractType is hourly, it is scheduled for termination immediately, otherwise, will be marked for termination at the date specified by the load balancer field `contractEndAt`"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "tags": ["Load Balancer"],
        "summary": "Update load balancer",
        "operationId": "updateLoadBalancer",
        "description": "Update load balancer configurations",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateLoadBalancerOpts"
              },
              "example": {
                "type": "lsw.m3.xlarge",
                "reference": "foo",
                "targetPort": 9000,
                "xForwardedFor": false,
                "contractType": "HOURLY",
                "balance": "ROUNDROBIN",
                "idleTimeOut": 60
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "customerId": "11111111",
                  "id": "d930cf34-0fdb-406d-b3d0-75add3eb5efe",
                  "type": "lsw.c3.large",
                  "resources": {
                    "cpu": {
                      "value": 2,
                      "unit": "vCPU"
                    },
                    "memory": {
                      "value": 3,
                      "unit": "GiB"
                    },
                    "publicNetworkSpeed": {
                      "value": 1,
                      "unit": "Gbps"
                    },
                    "privateNetworkSpeed": {
                      "value": 100,
                      "unit": "Mbps"
                    }
                  },
                  "region": "eu-west-3",
                  "reference": "my-loadbalancer1",
                  "state": "RUNNING",
                  "ips": [
                    {
                      "ip": "85.99.99.99",
                      "prefixLength": "28",
                      "version": 4,
                      "nullRouted": false,
                      "reverseLookup": null,
                      "mainIp": false,
                      "networkType": "PUBLIC",
                      "ddos": {
                        "detectionProfile": "STANDARD_DEFAULT",
                        "protectionType": "STANDARD"
                      }
                    }
                  ],
                  "startedAt": "2024-04-09T15:11:37+00:00",
                  "contract": {
                    "billingFrequency": 1,
                    "term": 0,
                    "type": "HOURLY",
                    "endsAt": null,
                    "renewalsAt": "2024-04-09T15:28:28+00:00",
                    "createdAt": "2024-04-09T15:11:21+00:00",
                    "state": "ACTIVE"
                  },
                  "configuration": {
                    "stickySession": null,
                    "balance": "ROUNDROBIN",
                    "healthCheck": null,
                    "xForwardedFor": false,
                    "idleTimeOut": 60
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/loadBalancer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/loadBalancers/{loadBalancerId}/listeners": {
      "parameters": [
        {
          "$ref": "#/components/parameters/loadBalancerId"
        }
      ],
      "post": {
        "tags": ["Load Balancer"],
        "summary": "Create listener",
        "operationId": "createLoadBalancerListener",
        "description": "Create listener",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loadBalancerListenerOpts"
              },
              "example": {
                "protocol": "HTTPS",
                "port": 443,
                "certificate": {
                  "chain": "-----BEGIN CERTIFICATE-----MIICNDCCAZ2gAwIBAgIUEby6nzM+o7vkKfzcMS/DGA8tgwQwDQYJKoZIhvcNAQELBQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNDA0MjUwODE3MjZaFw0yNTA0MjUwODE3MjZaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMMiux2r1AFLVpIhdZ0bvgIvhiT9XCnfHJlGE7OarGKDKJDQ6XAquCfosLws2XAugGcMJWrsqVWtJEYSu6OMsDLYCJhh39AKqZIW0pktkr8LGlo4VLvzGPqwpHnzWthyCEFsE6p+JJQumDA/izJm2zjZL+xHDocOlNqDTB87AIdrAgMBAAGjITAfMB0GA1UdDgQWBBT3sXUrIR2vcwak0QCXoIsxHa4dDDANBgkqhkiG9w0BAQsFAAOBgQCh/l+5s713J02b8sWicUK2KjTPfyKmZFkoS+Mlo+//B/aM612ZJpGL2tAKGF3v0NDOrRYLZj0t/tlZI55pUNJI9cNj/RExvnfTSSNJIbV+8kQt5AHo50wGxj/apkuEtQre2Fpf4pyovcfIoF6HJvvp1jy96yL14UoEehZypR8FlA==-----END CERTIFICATE-----",
                  "certificate": "-----BEGIN CERTIFICATE-----MIIBhDCB7gIBADBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtWdKNbZxvkXKAADjJMJ7VTJz6uFoMD403C+gMIF8hwqIsHggzCao6iXrW9sZoyZtUBVBiiq5RumHbbpwvOdMmXrShEB4sTJkWRMDy7yD4D91WCU1fc10E/zBJMwssAvmHZo5kGW1Pj1N9ktb+O/TMsEc6yd5suvdQj6aaJbQlTQIDAQABoAAwDQYJKoZIhvcNAQELBQADgYEAWOQ2CJLRo8MQgJgvhdoSIkHITnrbjB5hS3f/dx0lIcnyI6Q9nOyuQHXkCgkdBaV8lz7l+IbqcGc3CaIRP2ZIVFvo2252n630tOOSsqoqJS1tYIoIKsohi3T3d8T1i/s0BWbTJi8Xgd186wyUn/jHwXROKx2rq6yYsAO6fISDKw8=-----END CERTIFICATE-----",
                  "privateKey": "-----BEGIN EC PRIVATE KEY-----MIHcAgEBBEIBVlC0IObonfQZIQ81l/WILKfWT5Fv96eNnYmQZ7uleu73igfiVESVuPfNlbW9oNEK1XcXli4YNZMxWMkKuzC3w8CgBwYFK4EEACOhgYkDgYYABAHvOqz9d2xeSpm1FNdw0NR5j/q6PMd6whZFsTPNYNj0/PsTpsHk78ZB4MYnJUXwHJjpj+gnKkLNc02f4w/vSF8VXADX4l40XU/w82TAOCftQwoxO5o0jZcwEUIYzl02Zd7uNxhjtKJQnYFi9x8WI8L8zQ6GZB/fJKYwoHaUr0I1h/5LzQ==-----END EC PRIVATE KEY-----"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loadBalancerListener"
                },
                "example": {
                  "protocol": "HTTPS",
                  "port": 443,
                  "id": "fac06878-6655-4956-8ea7-124a97f133ab"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/loadBalancers/{loadBalancerId}/listeners/{listenerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/loadBalancerId"
        },
        {
          "$ref": "#/components/parameters/listenerId"
        }
      ],
      "get": {
        "tags": ["Load Balancer"],
        "summary": "Get listener details",
        "operationId": "getLoadBalancerListener",
        "description": "Get details about a listener",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "protocol": "HTTPS",
                  "port": 443,
                  "id": "fac06878-6655-4956-8ea7-124a97f133ab"
                },
                "schema": {
                  "$ref": "#/components/schemas/loadBalancerListener"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "tags": ["Load Balancer"],
        "summary": "Update a listener",
        "operationId": "updateLoadBalancerListener",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loadBalancerListenerOpts"
              },
              "example": {
                "protocol": "HTTPS",
                "port": 443,
                "certificate": {
                  "chain": "-----BEGIN CERTIFICATE-----MIICNDCCAZ2gAwIBAgIUEby6nzM+o7vkKfzcMS/DGA8tgwQwDQYJKoZIhvcNAQELBQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNDA0MjUwODE3MjZaFw0yNTA0MjUwODE3MjZaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMMiux2r1AFLVpIhdZ0bvgIvhiT9XCnfHJlGE7OarGKDKJDQ6XAquCfosLws2XAugGcMJWrsqVWtJEYSu6OMsDLYCJhh39AKqZIW0pktkr8LGlo4VLvzGPqwpHnzWthyCEFsE6p+JJQumDA/izJm2zjZL+xHDocOlNqDTB87AIdrAgMBAAGjITAfMB0GA1UdDgQWBBT3sXUrIR2vcwak0QCXoIsxHa4dDDANBgkqhkiG9w0BAQsFAAOBgQCh/l+5s713J02b8sWicUK2KjTPfyKmZFkoS+Mlo+//B/aM612ZJpGL2tAKGF3v0NDOrRYLZj0t/tlZI55pUNJI9cNj/RExvnfTSSNJIbV+8kQt5AHo50wGxj/apkuEtQre2Fpf4pyovcfIoF6HJvvp1jy96yL14UoEehZypR8FlA==-----END CERTIFICATE-----",
                  "certificate": "-----BEGIN CERTIFICATE-----MIIBhDCB7gIBADBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtWdKNbZxvkXKAADjJMJ7VTJz6uFoMD403C+gMIF8hwqIsHggzCao6iXrW9sZoyZtUBVBiiq5RumHbbpwvOdMmXrShEB4sTJkWRMDy7yD4D91WCU1fc10E/zBJMwssAvmHZo5kGW1Pj1N9ktb+O/TMsEc6yd5suvdQj6aaJbQlTQIDAQABoAAwDQYJKoZIhvcNAQELBQADgYEAWOQ2CJLRo8MQgJgvhdoSIkHITnrbjB5hS3f/dx0lIcnyI6Q9nOyuQHXkCgkdBaV8lz7l+IbqcGc3CaIRP2ZIVFvo2252n630tOOSsqoqJS1tYIoIKsohi3T3d8T1i/s0BWbTJi8Xgd186wyUn/jHwXROKx2rq6yYsAO6fISDKw8=-----END CERTIFICATE-----",
                  "privateKey": "-----BEGIN EC PRIVATE KEY-----MIHcAgEBBEIBVlC0IObonfQZIQ81l/WILKfWT5Fv96eNnYmQZ7uleu73igfiVESVuPfNlbW9oNEK1XcXli4YNZMxWMkKuzC3w8CgBwYFK4EEACOhgYkDgYYABAHvOqz9d2xeSpm1FNdw0NR5j/q6PMd6whZFsTPNYNj0/PsTpsHk78ZB4MYnJUXwHJjpj+gnKkLNc02f4w/vSF8VXADX4l40XU/w82TAOCftQwoxO5o0jZcwEUIYzl02Zd7uNxhjtKJQnYFi9x8WI8L8zQ6GZB/fJKYwoHaUr0I1h/5LzQ==-----END EC PRIVATE KEY-----"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loadBalancerListener"
                },
                "example": {
                  "protocol": "HTTPS",
                  "port": 443,
                  "id": "fac06878-6655-4956-8ea7-124a97f133ab"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": ["Load Balancer"],
        "summary": "Delete load balancer listener",
        "operationId": "deleteLoadBalancerListener",
        "description": "Delete a listener",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/loadBalancers/{loadBalancerId}/targets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/loadBalancerId"
        }
      ],
      "post": {
        "tags": ["Load Balancer"],
        "summary": "List registered targets",
        "operationId": "getLoadBalancerTargetList",
        "description": "List targets registered in a load balancer.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getLoadBalancerTargetListResult"
                },
                "example": {
                  "targets": [
                    {
                      "id": "0af98842-38a4-4fe5-8b6d-687730e8d8c1",
                      "reference": "lb instance 1",
                      "operatingSystem": {
                        "id": "UBUNTU_22_04_64BIT",
                        "name": "Ubuntu 22.04 LTS (x86_64)",
                        "version": "22.04",
                        "family": "linux",
                        "flavour": "ubuntu",
                        "architecture": "x86_64"
                      },
                      "state": "RUNNING",
                      "ips": [
                        {
                          "ip": "10.32.60.2",
                          "prefixLength": "32",
                          "version": 4,
                          "nullRouted": false,
                          "reverseLookup": null,
                          "networkType": "INTERNAL",
                          "mainIp": false
                        }
                      ],
                      "healthCheckStatus": {
                        "checkStatus": "Connection timeout",
                        "status": "DOWN"
                      }
                    },
                    {
                      "id": "8be7f8c6-e8c0-4321-a01e-ac754e2f6872",
                      "reference": "lb instance 2",
                      "operatingSystem": {
                        "id": "UBUNTU_22_04_64BIT",
                        "name": "Ubuntu 22.04 LTS (x86_64)",
                        "version": "22.04",
                        "family": "linux",
                        "flavour": "ubuntu",
                        "architecture": "x86_64"
                      },
                      "state": "RUNNING",
                      "ips": [
                        {
                          "ip": "85.17.17.71",
                          "prefixLength": "32",
                          "version": 4,
                          "nullRouted": false,
                          "reverseLookup": null,
                          "networkType": "PUBLIC",
                          "mainIp": true
                        }
                      ]
                    }
                  ],
                  "_metadata": {
                    "totalCount": 2,
                    "limit": 20,
                    "offset": 0
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/loadBalancers/{loadBalancerId}/registerTargets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/loadBalancerId"
        }
      ],
      "post": {
        "tags": ["Load Balancer"],
        "summary": "Register targets",
        "operationId": "registerLoadBalancerTargets",
        "description": "Register targets in a load balancer. Instances must be running and have private network enabled so they can be registered.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loadBalancerTargetOpts"
              },
              "example": {
                "targets": [
                  {
                    "id": "8be7f8c6-e8c0-4321-a01e-ac754e2f6872"
                  },
                  {
                    "id": "b05917e1-96a4-442a-900c-c41f273d95c9"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/loadBalancers/{loadBalancerId}/deregisterTargets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/loadBalancerId"
        }
      ],
      "post": {
        "tags": ["Load Balancer"],
        "summary": "Deregister targets",
        "operationId": "deregisterLoadBalancerTargets",
        "description": "Deregister targets registered in a load balancer.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loadBalancerTargetOpts"
              },
              "example": {
                "targets": [
                  {
                    "id": "8be7f8c6-e8c0-4321-a01e-ac754e2f6872"
                  },
                  {
                    "id": "b05917e1-96a4-442a-900c-c41f273d95c9"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/ips": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "name": "version",
          "required": false,
          "schema": {
            "type": "integer",
            "example": "4"
          },
          "in": "query"
        },
        {
          "name": "nullRouted",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "in": "query"
        },
        {
          "name": "ips",
          "required": false,
          "description": "A list of IPs separated by `|`",
          "schema": {
            "type": "string"
          },
          "in": "query"
        }
      ],
      "get": {
        "tags": ["IPs"],
        "summary": "List instance's IPs",
        "operationId": "getIpList",
        "description": "List the instance's IPs",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "ips": [
                    {
                      "ip": "10.0.0.1",
                      "prefixLength": "28",
                      "version": 4,
                      "reverseLookup": null,
                      "mainIp": false,
                      "nullRouted": false,
                      "networkType": "INTERNAL",
                      "ddos": {
                        "detectionProfile": "STANDARD_DEFAULT",
                        "protectionType": "STANDARD"
                      }
                    }
                  ],
                  "_metadata": {
                    "totalCount": 1,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getIpListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/ips/{ip}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "name": "ip",
          "required": true,
          "schema": {
            "type": "string",
            "format": "ip",
            "example": "10.0.0.1"
          },
          "in": "path"
        }
      ],
      "get": {
        "tags": ["IPs"],
        "summary": "Get details about an instance's IP",
        "operationId": "getIp",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "ip": "10.0.0.1",
                  "prefixLength": "28",
                  "version": 4,
                  "reverseLookup": "a-valid-domain.xpto",
                  "mainIp": false,
                  "networkType": "INTERNAL",
                  "nullRouted": true,
                  "ddos": {
                    "detectionProfile": "STANDARD_DEFAULT",
                    "protectionType": "STANDARD"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "tags": ["IPs"],
        "summary": "Update IP",
        "operationId": "updateIp",
        "description": "Allows you to set the reverse lookup for the IP",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateIpOpts"
              },
              "example": {
                "reverseLookup": "a-valid-domain.xpto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "ip": "10.0.0.1",
                  "prefixLength": "28",
                  "version": 4,
                  "reverseLookup": "a-valid-domain.xpto",
                  "mainIp": false,
                  "networkType": "INTERNAL",
                  "nullRouted": true,
                  "ddos": {
                    "detectionProfile": "STANDARD_DEFAULT",
                    "protectionType": "STANDARD"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/ips/{ip}/null": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "name": "ip",
          "required": true,
          "schema": {
            "type": "string",
            "format": "ip",
            "example": "10.0.0.1"
          },
          "in": "path"
        }
      ],
      "post": {
        "tags": ["IPs"],
        "summary": "Null route IP",
        "operationId": "nullRouteIp",
        "description": "Null route an IP. It may take a few minutes before the change is propagated across the network.\n\nOnly works for IPv4.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nullRouteIpOpts"
              },
              "example": {
                "comment": "Getting DDoS",
                "automatedUnnulingAt": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "ip": "10.0.0.1",
                  "prefixLength": "28",
                  "version": 4,
                  "reverseLookup": "a-valid-domain.xpto",
                  "mainIp": false,
                  "networkType": "INTERNAL",
                  "nullRouted": true,
                  "ddos": {
                    "detectionProfile": "STANDARD_DEFAULT",
                    "protectionType": "STANDARD"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/ips/{ip}/unnull": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "name": "ip",
          "required": true,
          "schema": {
            "type": "string",
            "format": "ip",
            "example": "10.0.0.1"
          },
          "in": "path"
        }
      ],
      "post": {
        "tags": ["IPs"],
        "summary": "Remove an IP null route",
        "operationId": "removeIpNullRoute",
        "description": "Remove an IP null route. It may take a few minutes before the change is propagated across the network",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "ip": "10.0.0.1",
                  "prefixLength": "28",
                  "version": 4,
                  "reverseLookup": "a-valid-domain.xpto",
                  "mainIp": false,
                  "networkType": "INTERNAL",
                  "nullRouted": true,
                  "ddos": {
                    "detectionProfile": "STANDARD_DEFAULT",
                    "protectionType": "STANDARD"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/metrics/datatraffic": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "$ref": "#/components/parameters/from"
        },
        {
          "$ref": "#/components/parameters/to"
        },
        {
          "name": "granularity",
          "schema": {
            "type": "string",
            "enum": ["DAY"]
          },
          "in": "query",
          "description": "How the metrics are grouped by"
        },
        {
          "name": "aggregation",
          "schema": {
            "type": "string",
            "enum": ["SUM"]
          },
          "in": "query",
          "description": "How the metrics are aggregated"
        }
      ],
      "get": {
        "tags": ["Metrics"],
        "summary": "Get instance data traffic metrics",
        "operationId": "getDataTrafficMetrics",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "DOWN_PUBLIC": {
                      "values": [
                        {
                          "value": 461323,
                          "timestamp": "2023-10-27T00:00:00+00:00"
                        },
                        {
                          "value": 1249243,
                          "timestamp": "2023-10-28T00:00:00+00:00"
                        }
                      ],
                      "unit": "B"
                    },
                    "UP_PUBLIC": {
                      "values": [
                        {
                          "value": 437565,
                          "timestamp": "2023-10-27T00:00:00+00:00"
                        },
                        {
                          "value": 6938590,
                          "timestamp": "2023-10-28T00:00:00+00:00"
                        }
                      ],
                      "unit": "B"
                    }
                  },
                  "_metadata": {
                    "from": "2023-10-01T00:00:00+00:00",
                    "to": "2023-10-31T00:00:00+00:00",
                    "granularity": "DAY",
                    "aggregation": "SUM",
                    "summary": {
                      "DOWN_PUBLIC": {
                        "average": "855.28 KB",
                        "expected": "25.66 MB",
                        "total": "1.71 MB",
                        "peak": {
                          "value": "1.25 MB",
                          "timestamp": "2023-10-28T00:00:00+00:00"
                        }
                      },
                      "UP_PUBLIC": {
                        "average": "3.69 MB",
                        "expected": "110.64 MB",
                        "total": "7.38 MB",
                        "peak": {
                          "value": "6.94 MB",
                          "timestamp": "2023-10-28T00:00:00+00:00"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getDataTrafficMetricsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/metrics/cpu": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "$ref": "#/components/parameters/from"
        },
        {
          "$ref": "#/components/parameters/to"
        },
        {
          "$ref": "#/components/parameters/cpuGranularity"
        }
      ],
      "get": {
        "tags": ["Metrics"],
        "summary": "Get instance CPU metrics",
        "operationId": "getCpuMetrics",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "cpuMetrics": {
                      "values": [
                        {
                          "value": 5.45,
                          "timestamp": "2023-10-27T08:00:00+00:00"
                        },
                        {
                          "value": 8.98,
                          "timestamp": "2023-10-27T08:05:32+00:00"
                        },
                        {
                          "value": 9.98,
                          "timestamp": "2023-10-27T08:10:24+00:00"
                        }
                      ],
                      "unit": "%"
                    }
                  },
                  "_metadata": {
                    "from": "2023-10-27T08:00:00+00:00",
                    "to": "2023-10-28T08:00:00+00:00",
                    "granularity": "5m",
                    "summary": {
                      "cpuMetrics": {
                        "average": "8.13 %",
                        "expected": "8.13 %",
                        "peak": {
                          "value": "9.98 %",
                          "timestamp": "2023-10-27T08:10:24+00:00"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getCpuMetricsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/addToPrivateNetwork": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "put": {
        "tags": ["Private Networks"],
        "summary": "Add instance to Private Network",
        "operationId": "addToPrivateNetwork",
        "description": "Add instance to Private Network.\n\nCannot be performed when the instance has snapshots.",
        "responses": {
          "202": {
            "description": "Request has been accepted. Instance will be added to a private network in a few moments."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/removeFromPrivateNetwork": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "delete": {
        "tags": ["Private Networks"],
        "summary": "Remove instance from Private Network",
        "operationId": "removeFromPrivateNetwork",
        "description": "Remove instance from Private Network.\n\nCannot be performed when the instance has snapshots.",
        "responses": {
          "202": {
            "description": "Request has been accepted. Instance will be removed from private network in a few moments."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/snapshots": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        }
      ],
      "get": {
        "tags": ["Snapshots"],
        "summary": "List snapshots",
        "operationId": "getSnapshotList",
        "description": "List instance snapshots",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "snapshots": [
                    {
                      "id": "624c53c3-48e9-41d1-833f-90a9abf5fd95",
                      "displayName": "snapshot 1",
                      "state": "READY",
                      "created": "2023-11-02T07:31:28+0000"
                    }
                  ],
                  "_metadata": {
                    "totalCount": 1,
                    "limit": 20,
                    "offset": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/getSnapshotListResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": ["Snapshots"],
        "summary": "Create instance snapshot",
        "operationId": "createSnapshot",
        "description": "The instance must be running before the execution.\n\nThe time taken to create the snapshot depends on several factors, including memory size and usage.\n\nAllowed only one snapshot per instance.",
        "responses": {
          "202": {
            "description": "Request has been accepted and snapshot is going to be ready soon."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/instances/{instanceId}/snapshots/{snapshotId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/instanceId"
        },
        {
          "name": "snapshotId",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "in": "path"
        }
      ],
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshot detail",
        "operationId": "getSnapshot",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "example": {
                  "id": "ef73e9e2-95cd-49ef-940f-a24e6ad6c4a0",
                  "displayName": "snapshot 1",
                  "state": "READY",
                  "created": "2023-11-02T07:31:28+0000"
                },
                "schema": {
                  "$ref": "#/components/schemas/snapshot"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "tags": ["Snapshots"],
        "summary": "Restore instance snapshot",
        "operationId": "restoreSnapshot",
        "responses": {
          "202": {
            "description": "Request has been accepted and instance and snapshot is going to be restored to instance soon."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": ["Snapshots"],
        "summary": "Delete instance snapshot",
        "operationId": "deleteSnapshot",
        "responses": {
          "202": {
            "description": "Request has been accepted and instance and snapshot is going to be deleted. Its current state can be checked using the snapshots endpoints."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    }
  },
  "security": [
    {
      "X-LSW-Auth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.leaseweb.com/publicCloud/v1"
    }
  ],
  "tags": [
    {
      "name": "Errors",
      "description": "The API uses standard HTTP status codes to indicate the success or failure of the API call. The response will be JSON. Most APIs use the following format:\n\n```json\n{\n    \"errorCode\": \"APP00800\",\n    \"errorMessage\": \"The connection with the DB cannot be established.\",\n    \"correlationId\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"userMessage\": \"Cannot handle your request at the moment. Please try again later.\",\n    \"reference\": \"http://developer.leaseweb.com/errors/APP00800\"\n}\n```\n",
      "x-traitTag": true
    },
    {
      "name": "API Key Authentication",
      "description": "Authentication for the APIs is required. To authenticate your call, you will need to sent your API key as `X-LSW-Auth` header.\n\nYou can generate API keys in the [Customer Portal](https://secure.leaseweb.com/api-client-management/).\n",
      "x-traitTag": true
    },
    {
      "name": "Regions",
      "description": ""
    },
    {
      "name": "Instance Types",
      "description": ""
    },
    {
      "name": "Instances",
      "description": ""
    },
    {
      "name": "Power",
      "description": ""
    },
    {
      "name": "Credentials",
      "description": ""
    },
    {
      "name": "Expenses",
      "description": ""
    },
    {
      "name": "ISOs",
      "description": ""
    },
    {
      "name": "Operating Systems",
      "description": ""
    },
    {
      "name": "Marketplace Apps",
      "description": ""
    },
    {
      "name": "Metrics",
      "description": ""
    },
    {
      "name": "Snapshots",
      "description": ""
    },
    {
      "name": "IPs",
      "description": ""
    },
    {
      "name": "Private Networks",
      "description": ""
    },
    {
      "name": "Load Balancer",
      "description": ""
    }
  ]
}
